x = 15 # 이진수: 1111
y = 4  # 이진수: 0100
# ============= 산술(arithmetic) 연산자 ============= #

# 덧셈
print('x + y =', x + y)  # 출력: x + y = 19

# 뺄셈
print('x - y =', x - y)  # 출력: x - y = 11

# 곱셈
print('x * y =', x * y)  # 출력: x * y = 60

# 나눗셈 (결과: 실수)
print('x / y =', x / y)  # 출력: x / y = 3.75

# 몫 연산 (결과: 정수)
print('x // y =', x // y)  # 출력: x // y = 3

# 나머지 연산
print('x % y =', x % y)  # 출력: x % y = 3

# 거듭제곱
print('x ** y =', x ** y)  # 출력: x ** y = 50625

# ============= 비교(comparison)  연산자 ============= #

# 같음
print('x == y :', x == y)  # 출력: x == y : False

# 다름
print('x != y :', x != y)  # 출력: x != y : True

# 초과
print('x > y :', x > y)    # 출력: x > y : True

# 미만
print('x < y :', x < y)    # 출력: x < y : False

# 이상
print('x >= y :', x >= y)  # 출력: x >= y : True

# 이하
print('x <= y :', x <= y)  # 출력: x <= y : False

# ============= 대입(assignment)  연산자 ============= #

# 기본 대입
print('x =', x)  # 출력: x = 10

# 복합 대입 - 덧셈
x += 5  # x = x + 5와 같음
print('x += 5 :', x)  # 출력: x += 5 : 15

# 복합 대입 - 뺄셈
x -= 3  # x = x - 3과 같음
print('x -= 3 :', x)  # 출력: x -= 3 : 12

# 복합 대입 - 곱셈
x *= 2  # x = x * 2와 같음
print('x *= 2 :', x)  # 출력: x *= 2 : 24

# 복합 대입 - 나눗셈
x /= 4  # x = x / 4와 같음
print('x /= 4 :', x)  # 출력: x /= 4 : 6.0

# 복합 대입 - 몫
x //= 2  # x = x // 2와 같음
print('x //= 2 :', x)  # 출력: x //= 2 : 3.0

# 복합 대입 - 나머지
x = 17
x %= 5  # x = x % 5와 같음
print('x %= 5 :', x)  # 출력: x %= 5 : 2

# 복합 대입 - 거듭제곱
x **= 3  # x = x ** 3과 같음
print('x **= 3 :', x)  # 출력: x **= 3 : 8

# ============= 비트(bitwise)  연산자 ============= #

# 비트 AND (&)
print('x & y =', x & y)    # 출력: x & y = 4
# 1111 & 0100 = 0100 (4)

# 비트 OR (|)
print('x | y =', x | y)    # 출력: x | y = 15
# 1111 | 0100 = 1111 (15)

# 비트 XOR (^)
print('x ^ y =', x ^ y)    # 출력: x ^ y = 11
# 1111 ^ 0100 = 1011 (11)

# 비트 NOT (~)
print('~x =', ~x)          # 출력: ~x = -16
print('~y =', ~y)          # 출력: ~y = -5
# ~1111 = ...11110000 (음수는 2의 보수로 표현)

# 왼쪽 시프트(<<)
print('x << 2 =', x << 2)  # 출력: x << 2 = 60
# 1111을 왼쪽으로 2비트 이동: 111100 (60)

print('y << 1 =', y << 1)  # 출력: y << 1 = 8
# 0100을 왼쪽으로 1비트 이동: 1000 (8)

# 오른쪽 시프트(>>)
print('x >> 2 =', x >> 2)  # 출력: x >> 2 = 3
# 1111을 오른쪽으로 2비트 이동: 11 (3)

print('y >> 1 =', y >> 1)  # 출력: y >> 1 = 2
# 0100을 오른쪽으로 1비트 이동: 10 (2)